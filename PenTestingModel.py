import torch
import torch.nn as nn
import torch.optim as optim
import torchvision
from torchvision import transforms
from torch.utils.data import DataLoader

# Define a custom neural network model
class PenRecognitionModel(nn.Module):
    def __init__(self):
        super(PenRecognitionModel, self).__init()
        self.conv1 = nn.Conv2d(3, 32, 3)
        self.pool = nn.MaxPool2d(2, 2)
        self.conv2 = nn.Conv2d(32, 64, 3)
        self.fc1 = nn.Linear(64 * 14 * 14, 128)
        self.fc2 = nn.Linear(128, 1)

    def forward(self, x):
        x = self.pool(F.relu(self.conv1(x)))
        x = self.pool(F.relu(self.conv2(x)))
        x = x.view(-1, 64 * 14 * 14)
        x = F.relu(self.fc1(x))
        x = torch.sigmoid(self.fc2(x))
        return x

# Initialize the model, loss function, and optimizer
model = PenRecognitionModel()
criterion = nn.BCELoss()
optimizer = optim.Adam(model.parameters())

# Data preprocessing and loading
transform = transforms.Compose([transforms.Resize((64, 64)), transforms.ToTensor()])

train_data = torchvision.datasets.ImageFolder(root='path_to_training_data', transform=transform)
train_loader = DataLoader(train_data, batch_size=32, shuffle=True)

# Training loop
for epoch in range(10):
    running_loss = 0.0
    for i, data in enumerate(train_loader, 0):
        inputs, labels = data
        optimizer.zero_grad()
        outputs = model(inputs)
        loss = criterion(outputs, labels.float())
        loss.backward()
        optimizer.step()
        running_loss += loss.item()
    print(f'Epoch {epoch + 1}, Loss: {running_loss / len(train_loader)}')

print('Finished Training')
